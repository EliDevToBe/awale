{"version":3,"sources":["../src/awale.ts"],"sourcesContent":["import * as readline from \"readline\";\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\ntype Slot = \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\";\r\ntype Action = \"saw\" | \"harvest\";\r\ntype Color = \"black\" | \"red\" | \"green\" | \"yellow\" | \"blue\" | \"magenta\" | \"cyan\" | \"white\";\r\n\r\nexport class Awale {\r\n\r\n    #gameBoard: Map<string, number> = new Map([\r\n        [\"A\", 4],\r\n        [\"B\", 4],\r\n        [\"C\", 4],\r\n        [\"D\", 4],\r\n        [\"E\", 4],\r\n        [\"F\", 4],\r\n        [\"G\", 4],\r\n        [\"H\", 4],\r\n        [\"I\", 4],\r\n        [\"J\", 4],\r\n        [\"K\", 4],\r\n        [\"L\", 4]\r\n    ]);\r\n\r\n    #sides: Record<string, Slot[]> = {\r\n        upperBoard: [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"],\r\n        lowerBoard: [\"G\", \"H\", \"I\", \"J\", \"K\", \"L\"]\r\n    }\r\n\r\n    #players = new Map();\r\n\r\n    #turnCount = 0;\r\n    #turnArray: string[];\r\n\r\n    constructor() {\r\n\r\n        // Random attribution of starting player\r\n        let roleArray = [\"upperPlayer\", \"lowerPlayer\"];\r\n\r\n        const rndNum = Math.floor(Math.random() * 10);\r\n        if (rndNum % 2 == 0) {\r\n            roleArray = roleArray.reverse();\r\n        }\r\n        this.#turnArray = roleArray;\r\n    }\r\n\r\n    public async play() {\r\n\r\n        // Clear the console\r\n        process.stdout.write('\\x1bc');\r\n\r\n        console.info(`- --===== ${this.#colorize(\"Awale Game\", \"white\")} =====-- -`);\r\n        console.info();\r\n\r\n        await this.#definePlayers();\r\n\r\n        this.#display();\r\n\r\n        while (true) {\r\n\r\n            const playerInput: Slot = await this.#playerMove();\r\n            const currentPlayer = this.#getCurrentPlayer();\r\n\r\n            if (!currentPlayer.getBoard()?.includes(playerInput)) {\r\n                this.#display();\r\n\r\n                this.#deletePrevLine(2);\r\n\r\n                // Check Quit command\r\n                if (playerInput as string === \"Q\") {\r\n                    console.info(\"Exiting the game. Hope you had fun!\");\r\n                    break;\r\n                }\r\n\r\n                console.error(`\\x1b[31m'${playerInput}\\x1b[0m' -> is not a valid entry. `);\r\n                console.info();\r\n                continue;\r\n            }\r\n\r\n            this.#saw(playerInput, currentPlayer);\r\n\r\n            if (this.#isGameOver()) {\r\n                break\r\n            }\r\n        }\r\n\r\n        this.#players.forEach((player) => {\r\n            player.displayScore();\r\n        })\r\n        console.info();\r\n\r\n        rl.close();\r\n        process.exit();\r\n    }\r\n\r\n    async #definePlayers() {\r\n        const upperPlayer = await this.#askPlayerName(\"upper\");\r\n        this.#players.set(\"upperPlayer\", new Player(upperPlayer));\r\n        this.#players.get(\"upperPlayer\").setBoard(this.#sides.upperBoard);\r\n\r\n        const lowerPlayer = await this.#askPlayerName(\"lower\");\r\n        this.#players.set(\"lowerPlayer\", new Player(lowerPlayer));\r\n        this.#players.get(\"lowerPlayer\").setBoard(this.#sides.lowerBoard);\r\n    }\r\n\r\n    #askPlayerName(side: \"upper\" | \"lower\") {\r\n        return new Promise((resolve, reject) => {\r\n            rl.question(`Choose a player name for the \\x1b[33m${side}\\x1b[0m board: `, (answer) => {\r\n                resolve(answer.trim());\r\n            });\r\n        }) as unknown as string;\r\n    }\r\n\r\n    #playerMove() {\r\n        const currentPlayer = this.#getCurrentPlayer();\r\n\r\n        console.info(`It's your turn \\x1b[1m${currentPlayer.getName()}\\x1b[0m!`);\r\n\r\n        const playerSlots = currentPlayer.getBoard();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            rl.question(`Choose a slot to saw (${playerSlots?.join(\"-\")}): `, (answer) => {\r\n                resolve(answer.trim().toUpperCase());\r\n            });\r\n        }) as unknown as Slot\r\n    }\r\n\r\n    #display(slotToUpdate?: Slot[]): void {\r\n\r\n        // Clear the console\r\n        process.stdout.write('\\x1bc');\r\n\r\n        this.#rulesDisplay();\r\n        this.#boardDisplay(slotToUpdate);\r\n    }\r\n\r\n    #rulesDisplay(): void {\r\n        // Rules\r\n        console.info(`- --===== ${this.#colorize(\"Awale Rules\", \"white\")} =====-- -`);\r\n        console.info();\r\n        console.info(`${this.#colorize(\"造\", \"magenta\", true)} Each player chooses a \\x1b[34mnon empty\\x1b[0m slot to distribute the seeds \\r\\n inside following a counter-clockwise pattern.`);\r\n        console.info();\r\n        console.info(`${this.#colorize(\"造\", \"magenta\", true)} You have to choose a slot on your side: \\r\\n - ${this.#players.get(\"upperPlayer\")?.getName()}: A-B-C-D-E-F \\r\\n - ${this.#players.get(\"lowerPlayer\")?.getName()}: G-H-I-J-K-L`);\r\n        console.info();\r\n        console.info(`${this.#colorize(\"造\", \"magenta\", true)} When the \\x1b[34mfinishing slot\\x1b[0m of the distribution cycle has \\x1b[34m1-2 seeds\\x1b[0m \\r\\n and is in the adversary board, you \\x1b[34mcollect\\x1b[0m all the seeds in a \\r\\n clockwise pattern \\x1b[34muntil\\x1b[0m finding a slot of at least \\x1b[34m4 seeds\\x1b[0m.`);\r\n        console.info();\r\n        console.info(`${this.#colorize(\"造\", \"magenta\", true)} At anytime, type '\\x1b[31mQ\\x1b[0m' to \\x1b[31mexit\\x1b[0m the game.`);\r\n        console.info();\r\n        console.info();\r\n    }\r\n\r\n    #boardDisplay(slotToUpdate?: Slot[]): void {\r\n\r\n        this.#players.forEach((player) => {\r\n            player.displayScore();\r\n        })\r\n        console.info();\r\n\r\n        // Getting seeds state in upper/lower board\r\n        const upperState = this.#sides.upperBoard.map((el) => {\r\n            const value = this.#gameBoard.get(el);\r\n\r\n            if (value == 0) return this.#colorize(\" \" + value, \"red\");\r\n            if (value?.toString().length == 1) return this.#colorize(\" \" + value, \"yellow\");\r\n\r\n            return value\r\n        });\r\n        const lowerState = this.#sides.lowerBoard.map((el) => {\r\n            const value = this.#gameBoard.get(el);\r\n\r\n            if (value == 0) return this.#colorize(\" \" + value, \"red\");\r\n            if (value?.toString().length == 1) return this.#colorize(\" \" + value, \"yellow\");\r\n\r\n            return value\r\n        });\r\n\r\n        const upperBoardColored = this.#sides.upperBoard.map((el) => {\r\n            return slotToUpdate?.indexOf(el) == 1 ? this.#colorize(\" \" + el, \"magenta\", true)\r\n                : slotToUpdate?.indexOf(el) == 0 ? this.#colorize(\" \" + el, \"cyan\", true)\r\n                    : \" \" + el;\r\n        });\r\n        const lowerBoardColored = this.#sides.lowerBoard.map((el) => {\r\n            return slotToUpdate?.indexOf(el) == 1 ? this.#colorize(\" \" + el, \"magenta\", true)\r\n                : slotToUpdate?.indexOf(el) == 0 ? this.#colorize(\" \" + el, \"cyan\", true)\r\n                    : \" \" + el;\r\n        })\r\n\r\n        console.info(\"\\x1b[37m===== BOARD =====\\x1b[0m\");\r\n        console.info(...upperBoardColored);\r\n        console.info(...upperState);\r\n        console.info(...lowerState);\r\n        console.info(...lowerBoardColored);\r\n        console.info(\"\\x1b[37m=================\\x1b[0m\");\r\n        console.info();\r\n        console.info();\r\n        console.info();\r\n        console.info();\r\n    }\r\n\r\n    #colorize(element: string, color: Color, bold: boolean = false): string {\r\n\r\n        const colors = [\"black\", \"red\", \"green\", \"yellow\", \"blue\", \"magenta\", \"cyan\", \"white\"]\r\n        const params = colors.indexOf(color) + (bold ? \";1\" : \"\")\r\n\r\n        return `\\x1b[3${params}m` + element + \"\\x1b[0m\"\r\n    }\r\n\r\n    #deletePrevLine(num: number): void {\r\n\r\n        for (let i = 0; i < num; i++) {\r\n            process.stdout.write('\\x1b[1A\\x1b[2K');\r\n        }\r\n    }\r\n\r\n    #isGameOver(): boolean {\r\n        // Is the board empty ?\r\n        for (const [key, _] of this.#gameBoard) {\r\n            if (this.#gameBoard.get(key) != 0) {\r\n                return false\r\n            }\r\n        }\r\n        console.info(\"G A M E  O V E R\");\r\n        console.info(\"The board is finally empty!\");\r\n        return true\r\n    }\r\n\r\n    #saw(slot: Slot, player: Player): boolean {\r\n\r\n        let seedsNumber = this.#gameBoard.get(slot);\r\n\r\n        if (!seedsNumber) {\r\n            this.#display();\r\n\r\n            this.#deletePrevLine(2);\r\n\r\n            console.error(`\\x1b[31m${slot}\\x1b[0m is an empty slot!`);\r\n            console.info();\r\n\r\n            return false\r\n        }\r\n        this.#gameBoard.set(slot, 0);\r\n\r\n        const sawOrder = this.#getTurnOrderFrom(slot, \"saw\");\r\n\r\n        // Actual seed distribution\r\n        for (let i = 0; i < seedsNumber; i++) {\r\n\r\n            const key = sawOrder[i % sawOrder.length];\r\n            let value = this.#gameBoard.get(key)!;\r\n\r\n            this.#gameBoard.set(key, value += 1);\r\n        }\r\n\r\n        // Check for last slot and possible Harvest\r\n        const lastSlotKey = sawOrder[(seedsNumber - 1) % sawOrder.length];\r\n        const lastSlotValue = this.#gameBoard.get(lastSlotKey)! - 1;\r\n\r\n\r\n        if (lastSlotValue <= 2\r\n            && lastSlotValue > 0\r\n            && !player.getBoard()?.includes(lastSlotKey)\r\n        ) {\r\n            this.#harvest(lastSlotKey, player);\r\n\r\n            this.#display([slot, lastSlotKey]);\r\n            this.#deletePrevLine(3);\r\n\r\n            console.info(\r\n                `Player ${player.getName()} saw on slot ${this.#colorize(slot, \"cyan\", true)}.`\r\n            );\r\n            console.info(`/!\\\\ ${this.#colorize(\"HARVEST TIME\", \"magenta\", true)} on slot ${this.#colorize(lastSlotKey, \"magenta\")} /!\\\\`);\r\n\r\n        } else {\r\n            this.#display([slot]);\r\n            this.#deletePrevLine(2);\r\n\r\n            console.info(\r\n                `Player ${player.getName()} saw on slot ${this.#colorize(slot, \"cyan\", true)}.`\r\n            );\r\n        }\r\n\r\n        this.#turnCount++;\r\n\r\n        console.info();\r\n        return true\r\n    }\r\n\r\n    #harvest(slot: Slot, player: Player): void {\r\n\r\n        const harvestOrder = this.#getTurnOrderFrom(slot, \"harvest\");\r\n\r\n        for (const slot of harvestOrder) {\r\n            if (this.#gameBoard.get(slot)! > 3) {\r\n                break;\r\n            }\r\n\r\n            player.addPoints(this.#gameBoard.get(slot) ?? 0);\r\n            this.#gameBoard.set(slot, 0);\r\n        }\r\n    }\r\n\r\n    #getCurrentPlayer(): Player {\r\n        const playerRole = this.#turnArray[this.#turnCount % 2];\r\n        return this.#players.get(playerRole)!;\r\n    }\r\n\r\n    #getTurnOrderFrom(slot: Slot, action: Action): Slot[] {\r\n        const turnOrder: Slot[] = [\"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"];\r\n        const sawOrder = [\r\n            ...turnOrder.slice(turnOrder.indexOf(slot) + 1),\r\n            ...turnOrder.slice(0, turnOrder.indexOf(slot) + 1)];\r\n\r\n        if (action == \"saw\") {\r\n            return sawOrder\r\n        } else {\r\n            return sawOrder.reverse();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class Player {\r\n\r\n    #name: string;\r\n    #score: number = 0;\r\n    #board: Slot[] | null = null;\r\n\r\n    constructor(name: string) {\r\n        this.#name = '\\x1b[32m' + name + '\\x1b[0m';\r\n    }\r\n\r\n    public addPoints(num: number) {\r\n        this.#score += num;\r\n    }\r\n\r\n    public displayScore(): void {\r\n        console.info(`${this.#name} has \\x1b[33m${this.#score}\\x1b[0m point${this.#score ? 's' : ''}!`);\r\n    }\r\n\r\n    public getName() {\r\n        return this.#name;\r\n    }\r\n\r\n    public setBoard(board: Slot[]) {\r\n        this.#board = board;\r\n    }\r\n    public getBoard() {\r\n        return this.#board;\r\n    }\r\n}\r\n"],"mappings":"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","names":["slot"]}